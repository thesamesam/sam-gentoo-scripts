#!/usr/bin/env bash
# TODO: could add guessed subdir into S in ebuild?
# TODO: handle where a vendor dir already exists
. /lib/gentoo/functions.sh || { echo "Could not find gentoo-functions' functions.sh!" ; exit 1; }
. "$(pkg-config iwdevtools --variable=atomf)" || { eerror "Could not find iwdevtools' atomf library! Emerge app-portage/iwdevtools?" ; exit 1; }

# The following tar invocations use options specific to GNU tar. On some
# systems (e.g. Gentoo), `tar` can be a different tool (e.g. bsdtar), and GNU
# tar can be found as `gtar`.
if [[ -x "$(command -v gtar)" ]] ; then
       tar=gtar
else
       tar=tar
fi

if [[ ${BASH_SOURCE} == */* ]]; then
	SCRIPT_DIR=${BASH_SOURCE%/*}/
else
	SCRIPT_DIR=./
fi

ORIGINAL_PWD=$(pwd)
# Make reproducible tarballs. go mod download does not preserve timestamps,
# so clobber them; sort inputfiles; set ownership to something Gentoo-neutral.
REPRODUCIBLE_TAR_ARGS="--mtime="${SOURCE_DATE_EPOCH:-1970-01-01}" --sort=name --owner=portage --group=portage"
# TODO: verify this doesn't interfere with reproducible tars?
export XZ_OPT=${XZ_OPT-"-T0 -9e"}

mode=${3:-download} # could be vendor

${SCRIPT_DIR}/bump-generic "$@" || {
	case $? in
		3)
			ewarn "Continuing as re-generation of dep tarballs may be desired."
			;;
		*)
			exit $?
			;;
	esac
}

cd ${1} || exit 1
atomset "${1}-${2}"

ebuild=${P}.ebuild

# Now do the Go-specific bits.
#
# 1. sed out the dep tarball line if there is one, so we can fetch.
einfo "Sedding out 'deps' tarball line if exists"
sed -i -E "/^(\t+)?SRC_URI.*deps/ s/^/#/" ${ebuild} || exit 1

einfo "Sedding out 'EGO_SUM' lines if they exist"
if grep -q "EGO_SUM" ${ebuild} ; then
	if grep -qe 'EGO_SUM".*"' ${ebuild} ; then
		sed -i -e '/EGO_SUM/d' ${ebuild} || exit 1
	else
		sed -i -e '/EGO_SUM=(/,/)/d' ${ebuild} || exit 1
	fi

	sed -i -e '/EGO_SUM_SRC_URI/d' ${ebuild} || die
	sed -i -e '/go-module_set_globals/d' ${ebuild} || die

	# Add in our -deps line (commented)
	sed -i -E "/^(\t+)?SRC_URI=/a#SRC_URI+=\" \${P}-deps.tar.xz\"" ${ebuild} || exit 1
fi

# 2. Fetch!
einfo "Fetching ${P}"
ebuild ${ebuild} manifest || exit 1

# 3. Unpack then fetch Go deps
einfo "Unpacking ${P}"

# (We want to own this place)
export PORTAGE_TMPDIR="$(mktemp -d)"
export PORTAGE_USERNAME="$(whoami)"
export PORTAGE_WORKDIR_MODE="775"

NONFATAL_VERIFY=1 ebuild ${ebuild} clean unpack || exit 1

# We need to export these for use in the subshells :(
export D="${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/image
export WORKDIR="${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/work

# Borrowed from mgorny-dev-tools' pkgdiff
export S=$(sed -nr 's/^declare -x S="(.*)"/\1/p' "${PORTAGE_TMPDIR}"/portage/${CATEGORY}/${PF}/temp/environment)

case ${mode} in
	vendor)
		cmd='go mod vendor'
		;;
	download)
		# We previously used PWD here, but we now use WORKDIR so we can
		# greedily accumulate the cache when recursing into subdirs.
		cmd='GOMODCACHE="${WORKDIR}"/go-mod go mod download -modcacherw'
		;;
esac

einfo "Using mode=${mode} to download modules"

ebegin "Running '${cmd}'"
(
	cd "${S}" || exit 1

	if [[ ! -f go.mod ]] ; then
		ewarn "No go.mod in $(pwd)!"
		ewarn "Guessing first top-level subdir with go.mod?"
		dirs=$(find . -maxdepth 1 -type d -print)

		for dir in ${dirs[@]} ; do
			if [[ ${file} == *go-mod* ]] ; then
				continue
			fi

			if [[ -f ${dir}/go.mod ]] ; then
				einfo "Entering ${dir} which contains a go.mod file"
				cd ${dir} || exit 1
			fi
		done || { eerror "Could not find any go.mod in top-level subdirs either!" ; exit 1; }
	fi

	eval "${cmd}" || exit 1

	# Try to recursively grab go.mods greedily if we're in 'download' mode
	# (i.e. "dep tarball"). dev-db/etcd needed this.
	cd "${S}" || exit 1

	# TODO: just merge this into one loop? or advanced mode?
	dirs=$(find . -iname 'go.mod' -type f -print)
	# If there's multiple dirs with go.mod/go.sum, run in all of them.
	for file in ${dirs[@]} ; do
		dir=${file%/*}
		if [[ ${file} == *go-mod* ]] ; then
			continue
		fi

		if [[ -f ${dir}/go.mod ]] ; then
			einfo "Entering ${dir} which contains a go.mod file (recursive mode)"
			pushd ${dir} &>/dev/null || exit 1
			eval "${cmd}" || exit 1
			popd &>/dev/null || exit 1
		fi
	done || { eerror "Something went wrong in recursive download mode?" ; exit 1; }
)
eend $? || exit 1

ebegin "Creating tarball"
(
	cd "${S}" || exit 1

	# Find the (sub)dir we used earlier, even if it was a subdir we guessed
	cd $(find . -maxdepth 2 -type d -name '*go-mod*' -print -quit || exit 1)/.. || exit 1

	if [[ -n ${dir} ]] ; then
		# May be blank in vendor mode
		cd ${dir}/.. || exit 1
	fi

	tar_target=go-mod
	if [[ ${mode} == vendor ]] ; then
		tar_target=vendor

		# Recursive mode confused us.
		if [[ ! -d ${tar_target} && -d ${S}/${tar_target} ]] ; then
			cd "${S}" || exit 1
		fi
	else
		# For 'download' (dep tarballs), we support pulling in all the
		# go.mods recursively. Not yet hit a case where that's useful for
		# vendor tarballs so not tried that.
		# This lets us then just tar up the top-level go-mod/ dir.
		cd "${WORKDIR}" || exit 1
	fi

	# Cleanup junk
	find "${tar_target}/cache/download" -type f -name '*.zip' -delete

	LC_ALL=C TZ=UTC ${tar} ${REPRODUCIBLE_TAR_ARGS} -acf ${P}-deps.tar.xz ${tar_target} || exit 1

	mv ${P}-deps.tar.xz $(portageq distdir)/ || exit 1
)
eend $? || exit 1

# 4. collect licenses
ebegin "Collecting licenses"
(
	cd "${S}" || exit 1
	export GOCACHE="${PORTAGE_TMPDIR}/go-cache"
	export GOMODCACHE="${PORTAGE_TMPDIR}/go-mod"
	readarray -t LICENSES < <(go-licenses report ./... | cut -d',' -f3 | sort -u)

	MAPPING_FILE=$(portageq get_repo_path / gentoo)/metadata/license-mapping.conf

	readarray -t GENTOO_LICENSES < <(
		for license in "${LICENSES[@]}"; do
			VAL=$(grep -Po "^${license} = \K.*" "${MAPPING_FILE}")
			if [[ -n ${VAL} ]]; then
				echo "${VAL}"
			else
				ewarn "Unknown license: ${license}"
				echo "${license}"
			fi
		done | sort -u
	)

	ebuild=${ORIGINAL_PWD}/${CATEGORY}/${PN}/${ebuild}

	if grep -q "# Dependent licenses" ${ORIGINAL_PWD}/${ebuild} ; then
		# TODO: we need to sed the previous block with the new one. I've failed to build a sed expression for that
		sed -i -e "/LICENSE=/ a# Dependent licenses\nLICENSE+=\" $(printf " %s" "${GENTOO_LICENSES[@]}")\"" ${ebuild} || exit 1
	else
		sed -i -e "/LICENSE=/ a# Dependent licenses\nLICENSE+=\" $(printf " %s" "${GENTOO_LICENSES[@]}")\"" ${ebuild} || exit 1
	fi
)
eend $? || exit 1

# 4. Undo the sed we did earlier to the ebuild
cd ${ORIGINAL_PWD}/${CATEGORY}/${PN} || exit 1
einfo "Unsedding deps line in ebuild"
sed -i -e "/^#SRC_URI.*deps/ s/^#//" ${ebuild} || exit 1

einfo "Generating manifest"
ebuild ${ebuild} clean manifest || exit 1

einfo "All done."
einfo "Dep tarball now at: $(portageq distdir)/${P}-deps.tar.xz!"

rsync --mkpath -av -P "$(portageq distdir)/${P}-deps.tar.xz" dev.gentoo.org:~/public_html/distfiles/${CATEGORY}/${PN}/${P}-deps.tar.xz
